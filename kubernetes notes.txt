kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: dev-cluster
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 30001
    hostPort: 30001
    protocol: TCP
- role: worker
- role: worker

D:\kind>kind get clusters															                         (5/3/24)
demo
fusion-java.cluster

D:\kind>kind create cluster --config=multi.yml
ERROR: failed to create cluster: could not determine kind / apiVersion for config: yaml: line 11: could not find expected ':'

D:\kind>kind create cluster --config=multi.yml
Creating cluster "dev-cluster" ...
 • Ensuring node image (kindest/node:v1.29.2) 🖼  ...
 ✓ Ensuring node image (kindest/node:v1.29.2) 🖼
 • Preparing nodes 📦 📦 📦   ...
 ✓ Preparing nodes 📦 📦 📦
 • Writing configuration 📜  ...
 ✓ Writing configuration 📜
 • Starting control-plane 🕹️  ...
 ✓ Starting control-plane 🕹️
 • Installing CNI 🔌  ...
 ✓ Installing CNI 🔌
 • Installing StorageClass 💾  ...
 ✓ Installing StorageClass 💾
 • Joining worker nodes 🚜  ...
 ✓ Joining worker nodes 🚜
Set kubectl context to "kind-dev-cluster"
You can now use your cluster with:

kubectl cluster-info --context kind-dev-cluster

Thanks for using kind! 😊

D:\kind>kind get clusters
demo
dev-cluster
fusion-java.cluster

D:\kind>kubectl get nodes
NAME                        STATUS   ROLES           AGE   VERSION
dev-cluster-control-plane   Ready    control-plane   91s   v1.29.2
dev-cluster-worker          Ready    <none>          69s   v1.29.2
dev-cluster-worker2         Ready    <none>          68s   v1.29.2

*
*Creating a Pot:=
creating a pod in the file

apiVersion: v1
kind: Pod
metadata:
  name: nginx-demo
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:

*command for run the program:=
 kubectl apply -f .\pod1-nginx.yml(its your file name)

kubectl get pods

*nginx Web Hosting
  Creating a One file

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
      - containerPort: 80
          
*Run This Command For Program Execution
  kubectl apply -f .\nginx.yml
  kubectl get pods
  kubectl port-forward pod/nginx 8080:80

*Multi Running pod in one file:=
apiVersion: v1
kind: Pod
metadata:
  name: frontend-website-page
  labels:
   tier: backend
   app-name: website
spec:
   containers:
   - name: application-server
     image: nginx:1.14.2
     ports:
       - containerPort: 80

---

apiVersion: v1
kind: Pod
metadata:
  name: frontend-website-about-page
  labels:
   tier: backend
   app-name: website
spec:
   containers:
   - name: application-server
     image: nginx:1.14.2
     ports:
       - containerPort: 80

command:=
 kubectl apply -f .\nginx.yml
 kubectl get pod --show-labels
 kubectl get pod -o wide(this command is used for cluster ip chesks)


Node POrt:

apiVersion: v1
kind: Service
metadata:
  name: nginx-port2
spec:
  selector:
    tier: frondend
    app-name: website
  type: NodePort 
  ports:
  - port: 80
    targetPort: 80

 command:
kubectl apply -f .\nodeport.yml
kubectl get service (for checking the created node)
kubectl get pod
kubectl describe pod nginx-port2
kubectl get service
kubectl get node
kubectl get node -o wide
kubectl exec -it ubuntu1 -- /bin/bash(this command is used for attach the ubuntu server)
apt-get update
apt-get install curl
curl 172.18.0.3:30122( cluster node ip address and given the nodes port number)
exit
kubectl exec -it nginx11 -- /bin/bash (attach the nginx machin and then doing webhosting)
  
**ReplicaSet 
apiVersion: apps/v1 
kind: ReplicaSet    
metadata: 
  name: nginx-replica (Replicaset pod name gives)
spec:
  replicas: 3    (how many replica set we want to create given the as your choice number)  
  selector:       ()it add new grouping for new job) 
    matchLabels:
      tier: frontend
      app-name: website
  template:         (it send command for new spec:pods) 
    metadata: 
      labels:          (adding any label to new pods)
        tier: frontend
        app-name: website
    spec:
      containers:            (which type of cont we want cretate nginx/ubuntu machin as you want)
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

command:
   1 kubectl apply -f .\Replicaset.yml
   2 kubectl get pod
   3 kubectl delete pod nginx-replica-9b9c5(1st replicaset pod deleted then the automaticly new replicaset pod created)
   4 kubectl get pod(heres the new replica pot created and show)

Deployment:
apiVersion: apps/v1 
kind: Deployment  
metadata: 
  name: nginx-deploy
spec:
  replicas: 3      
  selector:
    matchLabels:
      tier: frontend
      app-name: website
  template:
    metadata: 
      labels:
        tier: frontend
        app-name: website
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
Command:
  1 kubectl apply -f .\Deployment.yml
  2 kubectl get pod
  3 kubectl delete pod nginx-deploy-9b9c5(1st replicaset pod deleted then the automaticly new replicaset pod created)
  4 kubectl get pod(heres the new deploy pot created and show)
  5 kubectl rollout history deployment (to their shows the deployment name nd labels)
In the deployment pod we verify, modify, update pod using deployment object.
